@page
@{
    ViewData["Title"] = "Realtime Monitor";
}
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js" integrity="sha256-R4pqcOYV8lt7snxMQO/HSbVCFRPMdrhAFMH+vr9giYI=" crossorigin="anonymous"></script>

<div class="card mb-3">
  <div class="card-header bg-info text-white"> <i class="fas fa-chart-line"></i> Realtime Monitor</div>
  <div class="card-body">
    <p class="card-text">
      <canvas id="wsChart" width="400" height="200"></canvas>
      <hr/>
      <canvas id="cpuChart" width="400" height="200"></canvas>
    </p> 
  </div>
</div>

<script>
// Working Set chart
var wsCtx = document.getElementById('wsChart');
var wsChart = new Chart(wsCtx, {
    type: 'line',
    data: {
        labels: [],
        datasets: [{
          label: 'Working Set (MBytes)',
          data: [],
          borderColor: 'rgba(0, 156, 220, 1.0)',
          backgroundColor: 'rgba(0, 156, 220, 0.4)',
          borderWidth: 3,
          lineTension: 0.3
        }]
    },
    options: {
    }
});

// CPU load chart
var cpuCtx = document.getElementById('cpuChart');
var cpuChart = new Chart(cpuCtx, {
    type: 'line',
    data: {
        labels: [],
        datasets: [{
          label: 'Processor Load (%)',
          data: [],
          borderColor: 'rgba(19, 185, 85, 1.0)',
          backgroundColor: 'rgba(19, 185, 85, 0.4)',
          borderWidth: 3,
          lineTension: 0.3
        }]
    },
    options: {
    }
});      

// Helper to add data to a chart
function addData(chart, label, data) {
  chart.data.labels.push(label);
  chart.data.datasets.forEach((dataset) => {
      dataset.data.push(data);
  });

  // Limit the charts at 30 data points
  if(chart.data.datasets[0].data.length > 30) {
    chart.data.datasets[0].data.shift()
    chart.data.labels.shift()
  }        
  chart.update();
}

// Call API to get data
function getData() {
  fetch('/api/monitoringdata')
  .then((response) => {
    return response.json();
  })
  .then((data) => {
    let d = new Date();

    // Add results to charts
    addData(wsChart, d.getHours()+":"+d.getMinutes()+":"+d.getSeconds(), data.workingSet / (1024*1024));          
    addData(cpuChart, d.getHours()+":"+d.getMinutes()+":"+d.getSeconds(), data.cpuPercentage);          
  });
}

// Fetch data every 3 seconds
setInterval(getData, 3000);
getData();

</script>